{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"WELCOME TO KREDIQ","text":"<p> Krediq :  A digital platform enabling collateral free-financing based on GST invoice data. It helps businesses optimize their working capital in quick time. Through it's vendor financing program, Krediq empowers buyers by providing enhanced cash flow management, strengthening supplier relationships, and offering a competitive edge. It contributes to build a resilient and efficient supply chain, benefiting all parties involved.</p>"},{"location":"index.html#our-mission","title":"Our Mission","text":"<ul> <li>Empowering SMEs with seamless invoice financing, turning financial challenges into opportunities for growth.</li> <li>our mission supports suppliers to secure easy financing based on GST data through its vendor financing program or invoice discounting program based on their track-record with buyers.</li> </ul>"},{"location":"index.html#who-we-are","title":"Who We Are","text":""},{"location":"index.html#history","title":"History","text":"<p>Registered on 1st September, 2023 as KREDIQ FINANCIAL TECHNOLOGIES PRIVATE LIMITED and listed in the class of Private company and classified as Non-govt company .</p>"},{"location":"index.html#vision","title":"Vision","text":"<p>At Krediq, our vision is to empower small and medium businesses by enabling easy access to low-risk credit based on their existing trade relationships and revenues.</p>"},{"location":"index.html#team","title":"Team","text":"<p>Meet the faces behind Krediq. Our team is comprised of passionate individuals dedicated to develop and bootstrap ideas </p> <ul> <li>ASIF ALY SHUJAATHALY - [Director &amp; CTO]</li> <li>BALAJI VENKATACHALAM - [Director]</li> <li>RAVINDRAN SUBBAIAH - [Director]</li> </ul>"},{"location":"index.html#what-sets-us-apart","title":"What Sets Us Apart","text":"<p>we have a unique perspective in trade finance model and delivering high reliable software solutions for our customers .</p>"},{"location":"index.html#contact-us","title":"Contact Us","text":"<p>We would love to hear from you! If you have any questions or inquiries, feel free to reach out to us.</p> <ul> <li>\ud83d\udce7 : help@krediq.com</li> <li>\ud83d\udccd :  No 21, Spero Sierra, 1st Floor, Awfis,  Bethel Nagar St, Industrial Estate,  Perungudi, Chennai, Tamil Nadu 600096.</li> <li>\ud83d\udcde  : 12131212313</li> </ul> <p>Thank you for choosing Krediq!</p>"},{"location":"contact.html","title":"CONTACT","text":""},{"location":"contact.html#developer-and-maintainer","title":"Developer and Maintainer","text":"<ul> <li>\ud83d\udc64 : ANAND RAJ B </li> <li>\ud83d\udce7 : anandrajb@venzotechnologies.com</li> <li>\ud83d\udcde  : 9677XXX69</li> </ul>"},{"location":"contact.html#support","title":"Support","text":"<ul> <li>\ud83d\udce7 : help@krediq.com</li> <li>\ud83d\udce7 : support@krediq.com</li> <li>\ud83d\udcde : 1212121212131</li> </ul>"},{"location":"contact.html#contact_1","title":"Contact","text":"<ul> <li>\ud83d\udccd :  No 21, Spero Sierra, 1st Floor, Awfis,  Bethel Nagar St, Industrial Estate,  Perungudi, Chennai, Tamil Nadu 600096.</li> <li>\ud83d\udcde  : 12131212313</li> </ul>"},{"location":"dev.html","title":"DEVELOPER DOCUMENTATION","text":""},{"location":"dev.html#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction<ul> <li>Project Overview</li> <li>Technologies Used</li> <li>Architecture Plan</li> <li>Transition Design overview</li> </ul> </li> <li>Installation and Setup<ul> <li>System Requirements</li> <li>Installation Steps</li> <li>Configuration</li> </ul> </li> <li>Project Structure<ul> <li>Folder Structure</li> <li>Key Files and Modules</li> </ul> </li> <li>Database Design<ul> <li>Entity-Relationship Diagram (ERD)</li> <li>Database Schema</li> <li>Indexing techniques</li> </ul> </li> <li>APIs and Endpoints<ul> <li>API Documentation</li> <li>Request/Response Examples</li> </ul> </li> <li>Authentication and Authorization<ul> <li>User Management</li> <li>Access Control</li> <li>Token-based Authentication</li> </ul> </li> <li>Data Processing and Calculation<ul> <li>Dashboard data</li> <li>Calculation Methods and Formula</li> </ul> </li> <li>External Integrations<ul> <li>External Service Configuration</li> </ul> </li> <li>Testing<ul> <li>Unit Tests</li> <li>Test Data and Fixtures</li> </ul> </li> <li>Deployment<ul> <li>Serverless Configuration</li> <li>Server Configuration</li> </ul> </li> <li>Performance Optimization<ul> <li>Caching Strategies</li> <li>Database Query Optimization</li> <li>Asynchronous Tasks</li> </ul> </li> <li>Security and Privacy<ul> <li>Data Encryption</li> <li>Secure coding practices</li> </ul> </li> <li>Glossary<ul> <li>Key terms</li> </ul> </li> <li>Multi-Tenancy Support</li> <li>Versionsing<ul> <li>Version Management</li> <li>Change log</li> </ul> </li> <li>Troubleshooting Guide<ul> <li>Common Issues and Solutions</li> <li>Debugging Techniques</li> </ul> </li> <li>Support and Contact Information<ul> <li>Developer and Maintainer </li> <li>Support</li> <li>Contact</li> </ul> </li> <li>Licensing Information<ul> <li>License Agreement</li> </ul> </li> </ol>"},{"location":"dev.html#introduction","title":"INTRODUCTION","text":""},{"location":"dev.html#project-overview","title":"Project Overview","text":"<p>krediq  - An one step  web-based invoice discounting platform  designed to simplify and optimize the process of invoice discounting for your businesses . With the aim of providing seamless financial solutions, krediq streamlines the complex process of invoice discounting, empowering SME's to unlock their working capital growth.</p>"},{"location":"dev.html#technologies-used","title":"Technologies Used","text":"<p>The following technologies and tools were used in the development of krediq :</p> <ul> <li>Django (version 4.2.5)</li> <li>Python (version 3.12.1)</li> <li>Django Rest Framework (version 3.2.5)</li> <li>Pandas (version 2.0.2)</li> <li>Django Channels (version 4.0.0)</li> </ul>"},{"location":"dev.html#architecture-plan","title":"Architecture Plan","text":"<ul> <li>The Application is build based on greenfield deployment model and further gets utilizes with blue-green model for forward stages .</li> <li>Design patterns are effectively utilized in-order to meet enterprise software experience .</li> <li> <p>The project is well refactored with pep guidelines  and architectured with the following criteria:</p> <ul> <li>Websocket Based Architecture (WBA)</li> <li>Message Oriented Middleware (MOA)</li> <li>Event Driven Architecture (EDA)</li> <li>Representational State Transfer (REST)</li> </ul> </li> </ul>"},{"location":"dev.html#transition-design-overview","title":"Transition Design overview","text":"<ul> <li>Consider an program contract with action of SUBMIT , the program starts with an lifcycle of initial sign moves to sign A , B and C so far .</li> <li>when the user configured the required number of signs in their admin panel , the algorithm automatically sets the last sign and applies further execution of code .</li> <li>The last sign values are captured using observer design pattern in simple django signals . </li> </ul> Warning <ul> <li>The signals works only for administrator and supervisor user . </li> </ul> <pre><code>graph LR\n  a1((initial sign)) ---&gt; A(((sign A))) ---&gt; B(((sign B))) ---&gt; C(((sign C)))</code></pre>"},{"location":"dev.html#installation-and-setup","title":"INSTALLATION AND SETUP","text":""},{"location":"dev.html#system-requirements","title":"System Requirements","text":"<p>Before you proceed with the installation of krediq, make sure your system meets the following requirements:</p> <ul> <li>Operating System: Windows 10, macOS Big Sur, or a Linux distribution (Ubuntu 20.04 recommended).</li> <li>Processor: Dual-core processor with a clock speed of 2.0 GHz or higher.</li> <li>Memory (RAM): Minimum 4 GB RAM, 8 GB recommended for optimal performance.</li> <li>Storage: At least 20 GB of available disk space for the application and database.</li> <li>Web Browser: Latest version of Google Chrome, Mozilla Firefox, or Microsoft Edge.</li> <li>Python: Version 3.10 or higher.</li> <li>Virtual Environment (recommended): Virtual environment tool such as <code>virtualenv</code> or <code>conda</code> for managing Python dependencies.</li> </ul>"},{"location":"dev.html#installation-steps","title":"Installation Steps","text":"<p>To install and set up krediq, follow these steps: <pre><code>- pip install -r requirements.txt\n- DJANGO_SETTINGS_MODDULE = krediq.settings \n- python manage.py migrate\n- python manage.py migrate --run-syncdb\n- python manage.py collectstatic\n- python manage.py runserver\n</code></pre></p>"},{"location":"dev.html#configuration","title":"Configuration","text":"<ul> <li> <p>Database</p> <ul> <li><code>DB_ENGINE</code></li> <li><code>DB_NAME</code></li> <li><code>DB_USER</code></li> <li><code>DB_PASSWORD</code></li> <li><code>DB_HOST</code></li> </ul> </li> <li> <p>Email </p> <ul> <li><code>EMAIL_HOST</code></li> <li><code>EMAIL_ID</code></li> <li><code>EMAIL_PASSWORD</code></li> <li><code>EMAIL_BACKEND</code></li> <li><code>EMAIL_PORT</code></li> </ul> </li> <li> <p>SMS </p> <ul> <li><code>TXT_LOCL_KEY</code></li> <li><code>TXT_LOCL_SNDR</code></li> </ul> </li> <li> <p>Production</p> <ul> <li><code>CSRF_HOSTS</code></li> <li><code>DEV</code></li> <li><code>TEST</code></li> <li><code>DISABLE_COLLECTSTATIC</code></li> </ul> </li> <li> <p>Url</p> <ul> <li><code>FINANCE_MODULE</code></li> <li><code>FINANCE_MODULE_TOKEN</code></li> <li><code>ONBOARDING_LINK</code></li> <li><code>LOGIN_LINK</code></li> </ul> </li> <li> <p>Support</p> <ul> <li><code>HELP_EMAIL</code></li> <li><code>SUPPORT_EMAIL</code></li> </ul> </li> <li> <p>Celery</p> <ul> <li><code>CELERY_URL</code></li> <li><code>CELERY_SSL</code></li> </ul> </li> <li> <p>Redis</p> <ul> <li><code>REDIS_URL</code></li> <li><code>REDIS_HOST</code></li> <li><code>REDIS_PASSWORD</code></li> </ul> </li> <li> <p>Storage</p> <ul> <li><code>STORAGE_ACCESS_KEY</code></li> <li><code>STORAGE_ACCESS_ID</code></li> <li><code>STORAGE_BUCKET_NAME</code></li> <li><code>STORAGE_ENDPOINT_URL</code></li> </ul> </li> <li> <p>Cache</p> <ul> <li><code>CACHE_LOCATION</code></li> <li><code>MEMCACHE_USERNAME</code></li> <li><code>MEMCACHE_PASSWORD</code></li> </ul> </li> <li> <p>Others</p> <ul> <li><code>SECRET_KEY</code></li> <li><code>MESSAGE_PAGE_SIZE</code></li> <li><code>DISABLE_COLLECTSTATIC</code></li> </ul> </li> <li> <p>Session</p> <ul> <li><code>SESSION_COOKIE_AGE</code></li> <li><code>SESSION_SAVE_EVERY_REQUEST</code></li> </ul> </li> <li> <p>HSTS</p> <ul> <li><code>SECURE_HSTS_SECONDS</code></li> <li><code>SECURE_SSL_REDIRECT</code></li> </ul> </li> </ul>"},{"location":"dev.html#project-structure","title":"PROJECT STRUCTURE","text":""},{"location":"dev.html#folder-structure","title":"Folder Structure","text":"<ul> <li> <p><code>/accounts</code>: This directory contains the main configuration code for authentication , authorization and onboarding information.</p> <ul> <li> <p><code>/api</code>: Houses of api for party , kyc , remittance ,currency , country and users .</p> </li> <li> <p><code>/serializers</code>: Contains the serializers for all accoutns models.</p> </li> <li> <p><code>/views</code>: holds the base api for currency , country etc., </p> </li> <li> <p><code>/models</code>: holds the database schema for the accounts</p> </li> <li> <p><code>/path</code>: Contains all the url for accounts .</p> </li> <li><code>/migrations</code>: Holds the migrations folder for the accounts app .</li> </ul> </li> <li> <p><code>/transaction</code>: This directory contains the main application code for all transactional process .</p> <ul> <li> <p><code>/api</code>: Houses the API-related code for program , counterparty, pairing , action status , invoice , finance request , finance repayment , transaction authorization.</p> </li> <li> <p><code>/serializers</code>: Contains the serializers for invoice , program , counterparty , invoice , finance request and repayments .</p> </li> <li> <p><code>/models</code>: holds the database schema for the transaction.</p> </li> <li> <p><code>/path</code>: Contains all the url for transaction .</p> </li> <li> <p><code>/migrations</code>: Holds the migrations folder for the transaction app .</p> </li> </ul> </li> <li> <p><code>/utils</code>: This directory contains the utility functions and action that required .</p> <ul> <li> <p><code>/app</code>: Houses for app level configuration include admin form , custom form , models manager , localization , class cache .</p> </li> <li> <p><code>/authorization</code>: Contains the jwt auth settings , custom  permissions , custom authentication .</p> </li> <li> <p><code>/enum</code>: Contains all the common and scheme based enum and choices </p> </li> <li> <p><code>/exception</code>: Holds all the custom exception for api level and serializers level . </p> </li> <li> <p><code>/file</code>: Holds all the image / document storage path and validation. </p> </li> <li> <p><code>/helpers</code>: Holds the queries , common functionality , results , hashing and validations .</p> </li> <li> <p><code>/middlewares</code>: Contains all the custom middlewares for the app on start for ip whitelist , websocket soft disconnect , session management , token expiration , otp clearing , asgi and wsgi config's , heartbeart for socket , socket authentication , login attempts .</p> </li> <li> <p><code>/response</code>: Holds base api response for 200 , 203 , 404 status codes with custom error response enum . </p> </li> </ul> </li> <li> <p><code>/services</code>: This directory maintains the cron jobs , observers  and signals .</p> <ul> <li> <p><code>/workers</code>: contains the finance request and repayment managements </p> </li> <li> <p><code>/signals</code>: observer design pattern model based on django signal for all last sign transaction .</p> </li> <li> <p><code>/socket</code>: web socket configuration for messages , dashboard , menu status  and pending invoices .</p> </li> </ul> </li> <li> <p><code>/search</code>: This directory maintains the search functionality .</p> <ul> <li> <p><code>/graphql</code>: graphql queries for transaction models includes finflo models and krediq schemas.</p> </li> <li> <p><code>/elasticsearch</code>: elasticsearch search modules for transaction .</p> </li> </ul> </li> <li> <p><code>/fixtures</code>: Common and scenario data to be loaded to db.</p> </li> <li><code>/static</code>: Static files such as stylesheets, JavaScript, and images.</li> <li><code>/templates</code>: HTML templates used to render the web pages.</li> <li><code>/tests</code>: Unit and integration tests for the application code and api test cases .</li> <li><code>/docs</code>: Documentation files, including this README and any additional guides.</li> <li><code>/requirements</code>: Lists of required Python packages for development and testing .</li> </ul> <p>Additional folders or subdirectories may exist based on specific project needs, such as:</p> <ul> <li><code>/scripts</code>: Custom scripts for deployment, data processing, or other tasks.</li> <li><code>/check</code>: Compatability check for right version usage . </li> <li><code>/logs</code>: Log files for application logging and debugging.</li> </ul> Note <ol> <li>Feel free to adjust the structure based on your  needs and best practices.</li> <li>Don't end up with circular dependencies . </li> </ol>"},{"location":"dev.html#database-design","title":"DATABASE DESIGN","text":""},{"location":"dev.html#entity-relationship-diagram-erd","title":"Entity-Relationship Diagram (ERD)","text":"<ul> <li>DB Diagram </li> </ul>"},{"location":"dev.html#database-schema","title":"Database Schema","text":"<pre><code>   class Name(models.Model):\n      first_name = models.charfield(max_length = 100)\n      last_name = models.charfield(max_length = 200)\n</code></pre>"},{"location":"dev.html#indexing-techniques","title":"Indexing techniques","text":"<pre><code>   indexes = [\n         models.Index(fields=[\"name\"]),\n         models.Index(fields=[\"account_number\"]),\n         models.Index(fields=[\"customer_id\"]),\n      ]\n</code></pre>"},{"location":"dev.html#apis-and-endpoints","title":"API'S AND ENDPOINTS","text":""},{"location":"dev.html#documentation","title":"Documentation","text":"<ul> <li> <p>API Documentation</p> </li> <li> <p>User Manual</p> </li> </ul>"},{"location":"dev.html#testing","title":"Testing","text":"<ul> <li> <p>Postman Flow</p> </li> <li> <p>Collection runner</p> </li> </ul>"},{"location":"dev.html#diagram","title":"Diagram","text":"<ul> <li> <p>System Design</p> </li> <li> <p>Flow Diagram</p> </li> <li> <p>UI Flow Diagram</p> </li> </ul>"},{"location":"dev.html#requestresponse-examples","title":"Request/Response Examples","text":"<pre><code>{\n    \"status\": \"Success\",\n    \"data\": []\n}\n</code></pre>"},{"location":"dev.html#authentication-and-authorization","title":"AUTHENTICATION AND AUTHORIZATION","text":""},{"location":"dev.html#user-management","title":"User Management","text":"<ul> <li>A user is linked to a party , in-detail a party can have multiple users of different type .</li> <li>User logs-in to the system via a 6 digit OTP sent to the user's email and phone number .</li> </ul>"},{"location":"dev.html#access-control","title":"Access Control","text":"<ul> <li>An administrator user who can login and can do all transactional process with endless permissions (cannot login to admin panel).</li> <li>An supervisor user who can login and can do transactional process with permission accessed by his party administrator (cannot login to admin panel).</li> <li>An master admin user who is allowed to perform all actions without restrictions except the signal trigger (can login to admin panel). </li> </ul>"},{"location":"dev.html#token-based-authentication","title":"Token-based Authentication","text":"<ul> <li>After OTP verification , the user gets logged-in to the system and a  64 bit Token will be shared to the user for authentication and authorization purposes . </li> </ul>"},{"location":"dev.html#data-processing-and-calculation","title":"DATA PROCESSING AND CALCULATION","text":""},{"location":"dev.html#dashboard-data","title":"Dashboard data","text":"<ul> <li>Data's for krediq customer's account dashboard are prepared in folder /service/socket/query/</li> <li>Processed data shared along with APF or RF seller's and along bank's .</li> <li>Data's are shared to customer's panel via websockets for real time accesibility .</li> </ul>"},{"location":"dev.html#calculation-methods-and-formulas","title":"Calculation Methods and Formulas","text":"<ul> <li> <p>Finance percentage</p> <ul> <li>(finance_amount / invoice_amount )*100</li> </ul> </li> <li> <p>Finance amount</p> <ul> <li>(min(max_invoice_amount, Invoice Amount) * max_invoice_percent) / 100 </li> </ul> </li> <li> <p>Utilization percent</p> <ul> <li>(used_limit / max_limit_amount) * 100</li> </ul> </li> </ul>"},{"location":"dev.html#external-integrations","title":"EXTERNAL INTEGRATIONS","text":"<ul> <li> <p>Finflo</p> <ul> <li>An customizable state transition package</li> <li>for installation check here</li> <li>for more information check here</li> </ul> </li> <li> <p>Finance Module</p> <ul> <li>To  process finances and repayment calculations</li> <li>For app walkthrough check here </li> <li>For usage and documentation check here</li> </ul> </li> <li> <p>Chat app</p> <ul> <li>bi-directional realtime chat application</li> <li>For app walkthrough check here </li> <li>For usage and documentation check here</li> </ul> </li> </ul>"},{"location":"dev.html#external-service-configuration","title":"External Service Configuration","text":"<ul> <li>Memcache<ul> <li>To store queryset and frequently accessed data in cache and retrieve effectively . </li> </ul> </li> <li>S3<ul> <li>To store statics and media for CDN and to maintain app ingress .</li> </ul> </li> <li>Celery<ul> <li>To process background tasks effectively .</li> </ul> </li> <li>Redis<ul> <li>To schedule and process tasks  .</li> </ul> </li> </ul>"},{"location":"dev.html#testing_1","title":"TESTING","text":""},{"location":"dev.html#unit-tests","title":"Unit Tests","text":"<ul> <li>For Unit testing the folder  testing maintains all the testing for accounts and transaction app .</li> <li>Test scenario are made in effectively inorder to acheive the flow pipeline .</li> <li>To run a test case </li> </ul> <pre><code>   - python manage.py test testing/accounts\n   - python manage.py test testing/transaction\n</code></pre>"},{"location":"dev.html#integeration-tests","title":"Integeration Tests","text":""},{"location":"dev.html#load-tests","title":"Load Tests","text":""},{"location":"dev.html#test-data-and-fixtures","title":"Test Data and Fixtures","text":"<ul> <li>Both scenario and sample data are available in fixtures folder </li> <li>refer FIXTURES.md for detailed explanation . </li> </ul>"},{"location":"dev.html#deployment","title":"DEPLOYMENT","text":""},{"location":"dev.html#serverless-configuration","title":"Serverless Configuration","text":"Heroku DeploymentDocker Deployment <ul> <li>Ensure Procfile is present in the diretory.</li> <li> <p>To run server gunicorn with workers</p> <pre><code>gunicorn krediq.asgi:application -k uvicorn.workers.UvicornWorker -w 4\n</code></pre> </li> </ul> <ul> <li>Build the Docker image using the provided Dockerfile.</li> <li>Push the Docker image to your preferred container registry.</li> <li>Deploy the Docker image to your hosting environment.</li> <li>for more info check this folder deploy/serverless</li> </ul>"},{"location":"dev.html#server-configuration","title":"Server Configuration","text":"Terraform Deploymentkubernetes Deployment <ul> <li>Install Terraform and configure your environment.</li> <li>Customize the Terraform variables in the <code>terraform.tfvars</code> file.</li> <li>Run <code>terraform init</code> and <code>terraform apply</code> to provision the infrastructure.</li> </ul> <ul> <li>Build the Docker image using the provided Dockerfile.</li> <li>Push the Docker image to your preferred container registry.</li> <li>Deploy the Docker image to your server or container orchestration system.</li> </ul>"},{"location":"dev.html#performance-optimization","title":"PERFORMANCE OPTIMIZATION","text":""},{"location":"dev.html#caching-strategies","title":"Caching Strategies","text":"<ul> <li>using django cache to store large and frequently used data</li> <li>added redis and memcache for better cache management .</li> </ul>"},{"location":"dev.html#database-query-optimization","title":"Database Query Optimization","text":"<ul> <li>usage of methods like select_related and prefetch_related</li> <li>Updated reverse relation queries inorder to make smaller queries </li> </ul>"},{"location":"dev.html#asynchronous-tasks","title":"Asynchronous Tasks","text":"<ul> <li>celery tasks to manage background tasks</li> <li> <p>you can run the celery with below command </p> <pre><code>    celery -A krediq worker --pool=solo -B -l info\n</code></pre> </li> <li> <p>for celery task scheduling use the below command</p> <pre><code>    celery -A krediq beat -l info\n</code></pre> </li> <li> <p>for celery beat db detachment</p> <pre><code>    celery -A krediq beat --detach -l info\n</code></pre> </li> </ul>"},{"location":"dev.html#security-and-privacy","title":"SECURITY AND PRIVACY","text":""},{"location":"dev.html#data-encryption","title":"Data Encryption","text":"<ul> <li>Using django's signer for to encrypt and decrypt customer's financial information .</li> <li>Ensuring that all sensitive data, both in transit and at rest, is encrypted using industry-standard algorithms. </li> <li>Using HTTPS for communication and encrypt sensitive fields in the database.</li> <li>Added TLS and SLS for better security .</li> </ul>"},{"location":"dev.html#secure-coding-practices","title":"Secure coding practices","text":"<ul> <li>Validating data that goes and comes back to the application </li> <li>Avoid hardcoding sensitive information such as API keys or passwords directly in the code. </li> <li>Use any Vault or KMS for credential management .</li> </ul>"},{"location":"dev.html#glossary","title":"GLOSSARY","text":""},{"location":"dev.html#key-terms","title":"Key terms","text":"<ul> <li>APF : Approved Payable Financing .</li> <li>RF : Receivable Financing .</li> <li>DF : Discounted Financing .</li> <li>SFSR : Same Day Financing Same Day Repayment .</li> <li>CUSTOMER : A set of users who can perform program and counterparty creation and manage invoices for their seller's .</li> <li>NON-CUSTOMER : A set of users who can onboard and upload invoices as seller to his buyer's . </li> <li>ANCHOR_PARTY : A party who acts as a buyer or customer .</li> <li>COUNTER_PARTY : A party whos acts as a seller for his linked buyer's . </li> <li>Awaiting approval : An contract submitted from the user' end and waits for approval from another end usere .</li> <li>Approved : An contract has been approved from that end user .</li> <li>Rejected : An contranct has been rejected from the end user . </li> <li>Finance Requested : An invoice has been raised for finance to bank side  .</li> <li>Overdue : An invoice which gets overdue when it reaches its due_date or late payment . </li> <li>Settled : An invoice which is settled its repayable's</li> <li>Partially Settled : An invoice which is settled its repayable's in partial amount .</li> </ul>"},{"location":"dev.html#multi-tenancy-support","title":"MULTI-TENANCY SUPPORT","text":"<ul> <li>Same Database with different schemas support for multi tenancy and multiple customer handling cases .</li> <li>Acts like as Saas (Software as a service) application for any customer based on their requirements.</li> <li>refer TENANTS.md  for detailed explanation .</li> </ul>"},{"location":"dev.html#versioning","title":"VERSIONING","text":""},{"location":"dev.html#version-management","title":"Version Management","text":"<ul> <li>The current repo follows Semantic Versioning model (SemVer) in git version controlling for production , test and development .</li> <li>Major version bumps has been avoided in the spec . </li> <li>for example ,<ul> <li>BETA-v1.1</li> <li>TEST-v1.1</li> <li>PRD-v2.1</li> </ul> </li> </ul>"},{"location":"dev.html#change-log","title":"Change log","text":"<ul> <li>each staging and commits are managed with tags as follows<ul> <li>Feature X added</li> <li>Bug Y fixed</li> </ul> </li> </ul> Tip <ul> <li>Updated CI / CD in github action , Circle CI , jenkins .</li> </ul> Important <ul> <li>When on production deployment , make a approval trigger in github actions . </li> </ul> Danger <ul> <li>Make sure to change the branch name in the pipeline.yaml  when a new checkout made in local codebase </li> </ul>"},{"location":"dev.html#troubleshooting-guide","title":"TROUBLESHOOTING GUIDE","text":""},{"location":"dev.html#common-issues-and-solutions","title":"Common issues and solutions","text":"<ul> <li>Common Issues: Migration , Data dropping , fixture loading issues can be managed wisely .</li> </ul>"},{"location":"dev.html#debugging-techniques","title":"Debugging Techniques","text":"<ul> <li>Error Codes: Added debug toolbar and monitoring tools to monitor incidents 24x7 .</li> <li>Logging: Server loggs can be enabled via settings.py and added external log tails .</li> <li>For more info refer troubleshoot  for detailed explanation .</li> </ul>"},{"location":"dev.html#support-and-contact-information","title":"SUPPORT AND CONTACT INFORMATION","text":""},{"location":"dev.html#developer-and-maintainer","title":"Developer and Maintainer","text":"<ul> <li>\ud83d\udc64 : ANAND RAJ B </li> <li>\ud83d\udce7 : anandrajb@venzotechnologies.com</li> <li>\ud83d\udcde  : 9677XXX69</li> </ul>"},{"location":"dev.html#support","title":"Support","text":"<ul> <li>\ud83d\udce7 : help@krediq.com</li> <li>\ud83d\udce7 : support@krediq.com</li> <li>\ud83d\udcde : 1212121212131</li> </ul>"},{"location":"dev.html#contact","title":"Contact","text":"<ul> <li>\ud83d\udccd :  No 21, Spero Sierra, 1st Floor, Awfis,  Bethel Nagar St, Industrial Estate,  Perungudi, Chennai, Tamil Nadu 600096.</li> <li>\ud83d\udcde  : 12131212313</li> </ul>"},{"location":"dev.html#licensing-information","title":"LICENSING INFORMATION","text":"<ul> <li>License Agreement:  Copyright \u00a9 krediq financial technologies private limited 2023</li> </ul>"},{"location":"faq.html","title":"SUPPORT AND FAQ","text":""},{"location":"faq.html#user-manual","title":"User Manual","text":""},{"location":"faq.html#getting-started","title":"Getting Started","text":"<ul> <li>Follow all the steps in the user guide .</li> <li>Log in to your account dashboard.</li> <li>Explore available features such as invoice submission, finance requests, and account management.</li> <li>Download the latest user manaul here </li> </ul>"},{"location":"faq.html#faqs","title":"FAQs","text":""},{"location":"faq.html#q-how-do-i-reset-my-password-as-a-master-admin","title":"Q: How do I reset my password as a master admin?","text":"<p>A: If your'e a master admin need to reset your password, go to the server terminal then type as follow. <pre><code>    - python manage.py changepassword &lt;phone_number&gt;\n</code></pre></p>"},{"location":"faq.html#q-what-is-an-apf-contract","title":"Q: What is an APF contract?","text":"<p>A: Approved Payables Finance (APF) is provided through a buyer-led programme within which sellers in the buyer\u2019s supply chain are able to access finance by means of Receivables Purchase. The technique provides a seller of goods or services with the option of receiving the discounted value of receivables (represented by outstanding invoices) prior to their actual due date and typically at a financing cost aligned with the credit risk of the buyer. The payable continues to be due by the buyer until its due date.</p>"},{"location":"faq.html#q-what-is-an-rf-contract","title":"Q: What is an RF contract?","text":"<p>A: Receivables financing (RF) is when a business transforms its outstanding accounts receivables (AR) into cash via a financing facility using the receivables as collateral. These receivables are invoices issued to customers, but the payment has not been made yet.</p>"},{"location":"faq.html#q-what-happens-if-my-finance-request-is-declined","title":"Q: What happens if my finance request is declined?","text":"<p>A: There is generally no fixed limit, but it depends on your credit limit and the terms of your agreement. Contact our support team if you have specific questions about your account.</p>"},{"location":"faq.html#q-how-long-does-it-take-for-invoices-to-be-approved","title":"Q: How long does it take for invoices to be approved?","text":"<p>A: The approval process typically takes 1-2 business days. Factors such as document accuracy , completeness , buyer availability can affect the approval time.</p>"},{"location":"faq.html#q-what-currencies-are-supported-on-the-platform","title":"Q: What currencies are supported on the platform?","text":"<p>A: We support a variety of currencies. Check our supported currencies list in the platform or contact  support  for specific information.</p>"},{"location":"faq.html#q-can-i-do-a-sfsr","title":"Q: Can i do a SFSR?","text":"<p>A: In our platform SFSR generally stands for same day financing same day repayment . Yes you can do a SFSR based on the customer's requirements to fill their incoming due's .</p>"},{"location":"faq.html#q-does-otp-has-a-expiry-timeout","title":"Q: Does OTP has a expiry timeout ?","text":"<p>A: Yes otp's will expiry in 120 seconds from their requested time .</p>"},{"location":"faq.html#q-does-sessions-gets-expiry-when-no-activity","title":"Q: Does Sessions gets expiry when no activity ?","text":"<p>A: Yes generally the session gets automatically disconnect when there is no incoming request for the particular client .</p>"},{"location":"faq.html#q-do-we-maintain-a-ledger-for-accounting","title":"Q: Do we maintain a ledger for accounting ?","text":"<p>A: Yes, we offer a individual finance module for financing and repayment solution , Check our documentation or contact support team for details on available integrations.</p>"},{"location":"faq.html#q-how-to-enquiry-the-list-of-transition-made-for-an-contract","title":"Q: How to enquiry the list of transition made for an contract?","text":"<p>A: Yes in your account dashboard , there is an option as enquiry to manage your transition that taken apart previously.</p>"},{"location":"faq.html#q-can-i-load-test-data-for-a-basic-scenarios","title":"Q: Can i load test data for a basic scenario's ?","text":"<p>A: Yes you can specific scenario based data for flow testing , check fixtures </p>"},{"location":"faq.html#q-does-bank-can-create-or-modify-contracts-for-customer","title":"Q: Does bank can create or modify contracts for customer?","text":"<p>A: Absolutely yes , krediq gives the freedom to create contracts from our back office . the bank can either create new contracts nor modify the existing contracts . </p>"},{"location":"faq.html#q-how-secure-is-my-financial-information-on-the-platform","title":"Q: How secure is my financial information on the platform?","text":"<p>A: We take the security of your financial information seriously. Our platform employs encryption and follows industry best practices to ensure the confidentiality and integrity of your data .</p>"},{"location":"faq.html#q-is-there-a-limit-to-the-number-of-invoices-i-can-submit","title":"Q: Is there a limit to the number of invoices I can submit?","text":"<p>A: There is generally no fixed limit, but it depends on your credit limit or available limit and the tenor of your agreement. Contact our support team if you have specific questions about your account.</p>"},{"location":"faq.html#q-can-i-customize-the-level-of-sign-for-each-transitions","title":"Q: Can i customize the level of sign for each transitions?","text":"<p>A: Yes you can take control of each of your transition for individual contracts with multiple levels of sign authority. </p>"},{"location":"faq.html#q-can-i-give-permission-to-a-subuser-to-do-specific-task","title":"Q: Can i give permission to a subuser to do specific task ?","text":"<p>A: Yes you can give a specific transition sign for a contract to a supervisor . Make sure this actions can be done only by the administrator's .</p>"},{"location":"faq.html#q-how-can-i-provide-feedback-on-the-platform-or-suggest-new-features","title":"Q: How can I provide feedback on the platform or suggest new features?","text":"<p>A: We value your feedback! Use the \"Feedback\" option in your account dashboard or contact our support team with your suggestions and comments.</p>"},{"location":"faq.html#q-can-a-master-admin-user-can-do-transition-for-a-contract-in-application","title":"Q: Can a master admin user can do transition for a contract in application?","text":"<p>A: Simply No !! , User's with related party are allowed to onboard to the platform , whereas an master admin who is responsible for the admin panel only . for detailed information check here .</p>"},{"location":"faq.html#q-can-i-export-my-invoices-and-finances-data-for-analysis-or-reporting-purposes","title":"Q: Can I export my invoices and finances data for analysis or reporting purposes?","text":"<p>A: Yes, you can export your financial data for analysis or reporting. We have dedicated API's in our platform for guidance on exporting data.</p>"},{"location":"faq.html#q-are-there-training-resources-available-for-using-the-platform","title":"Q: Are there training resources available for using the platform?","text":"<p>A:  Yes, we provide training resources such as tutorials and guides within the platform. Additionally, you can reach out to our support team for personalized assistance or training sessions.</p>"},{"location":"flows.html","title":"TRANSITION FLOWS FOR PROGRAM , INVOICES UPLOADS , INVOICES","text":""},{"location":"flows.html#1-program-flow","title":"1. PROGRAM FLOW","text":"<pre><code>    graph TD\n    G[CUSTOMER] --&gt; |1 . creates a program| B((SUBMIT))\n    B --&gt; |awaiting approval| C[bank]\n    C --&gt; |bank approves| D((APPROVE))\n    C --&gt; |bank rejects| F((REJECT))\n    C --&gt; |bank modifies the program| H((MODIFY))\n    H --&gt; G\n    G --&gt; |only if modified by bank |N((ACCEPT))\n    N --&gt; C\n    D --&gt; |approved|G\n    F --&gt; |rejected| G\n\n    style G fill:#FFEFD5, stroke:#000000, stroke-width:2px\n    style B fill:#B0E0E6, stroke:#000000, stroke-width:2px\n    style C fill:#ADD8E6, stroke:#000000, stroke-width:2px\n    style D fill:#00ff00, stroke:#000000, stroke-width:2px\n    style F fill:#FF7F50, stroke:#000000, stroke-width:2px\n    style H fill:#B0E0E6, stroke:#000000, stroke-width:2px\n\n</code></pre>"},{"location":"flows.html#2-invoice-upload-and-finance-requests-flow","title":"2. INVOICE UPLOAD  AND FINANCE REQUESTS  FLOW","text":"<pre><code>    flowchart TD\n\n    subgraph Create Finance Request and Limit Checking Process\n        A{FINANCE_REQUEST&lt;br/&gt;&lt;br/&gt;limit checking}\n        C[FINANCE REQUESTED&lt;br/&gt;&lt;br/&gt;from: &lt;strong&gt;transition party&lt;/strong&gt; , to: bank]\n        D[FINANCED&lt;br/&gt;&lt;br/&gt;from: finance module, to: &lt;strong&gt;transition party&lt;/strong&gt;]\n        E(fa:fa-university BANK) \n        F((RECHECK))\n        G((APPROVE))\n        H((REJECT))\n        J{ &lt;strong&gt; FINANCING MODULE &lt;/strong&gt; &lt;br&gt; &lt;br&gt; updates the interest amount , &lt;br&gt; interest rate , finance id }\n        M(fa:fa-user COUNTERPARTY)\n\n        %% Flows\n        A --&gt;|limit_check: fail or passed| C --&gt; E\n        E --&gt; F &amp; G &amp; H\n        F --&gt; |bank rechecks|A\n        G --&gt; J --&gt; D --&gt; M\n\n\n        %% Styles\n        style A fill:#FFEFD5, stroke:#000000, stroke-width:2px\n        style C fill:#F5DEB3, stroke:#000000, stroke-width:2px\n        style D fill:#B0E0E6, stroke:#000000, stroke-width:2px\n        style E fill:#00ff00, stroke:#000000, stroke-width:2px\n        style F fill:#cfc4a7, stroke:#000000, stroke-width:2px\n        style G fill:#00ff00, stroke:#000000, stroke-width:2px\n        style H fill:#ADD8E6, stroke:#000000, stroke-width:2px\n        style M fill:#00ff00, stroke:#000000, stroke-width:2px\n    end\n\n    subgraph MODEL 1 : APF BUYER\n\n        A1{PROGRAM_TYPE: APF} --&gt; |uploads invoices for counterparty| B1((SUBMIT))\n        B1 --&gt; |after last sign| C1{check pairing autofinance}\n        C1 --&gt; |auto_finance: false| D1[APPROVED BY BUYER]\n        C1 --&gt; |auto_finance: true| A\n        D1 --&gt; E1(fa:fa-user COUNTERPARTY)\n        E1 --&gt; F1((REQUEST FINANCE))\n        F1 --&gt; |raise finance request| A\n\n        style A1 fill:#FFEFD5, stroke:#000000, stroke-width:2px\n        style B1 fill:#B0E0E6, stroke:#000000, stroke-width:2px\n        style C1 fill:#B0E0E6, stroke:#000000, stroke-width:2px\n        style D1 fill:#F5DEB3, stroke:#000000, stroke-width:2px\n        style A fill:#ADD8E6, stroke:#000000, stroke-width:2px\n        style E1 fill:#00ff00, stroke:#000000, stroke-width:2px\n        style F1 fill:#B0E0E6, stroke:#000000, stroke-width:2px\n    end\n\n    subgraph MODEL 2 : APF SELLER or RF SELLER\n\n        A2{PROGRAM_TYPE: APF or RF} --&gt; |uploads invoices for buyer's| B2((SUBMIT))\n        B2 --&gt; |after last sign| C2{AUTO_FINANCE = T/F, based on datasource values&lt;br/&gt;FOR RF_seller default AUTO_FINANCE = True}\n        C2 --&gt; |program_type: RF , auto_finance: True| D2[FINANCE REQUESTED]\n        D2 --&gt; |raise finance request| A\n        C2 --&gt; |program_type: APF | E2[AWAITING BUYER APPROVAL]\n        E2 --&gt; F2(fa:fa-user ANCHOR PARTY)\n        F2 --&gt; G2((APPROVE))\n        F2 --&gt; H2((REJECT))\n        G2 --&gt; |auto finance based on invoice record| I2{checks invoice auto_finance}\n        I2 --&gt; |auto finance: True| A\n        I2 --&gt; |auto finance: False| D1\n\n        style A2 fill:#FFEFD5, stroke:#000000, stroke-width:2px\n        style B2 fill:#B0E0E6, stroke:#000000, stroke-width:2px\n        style C2 fill:#B0E0E6, stroke:#000000, stroke-width:2px\n        style D2 fill:#F5DEB3, stroke:#000000, stroke-width:2px\n        style E2 fill:#ADD8E6, stroke:#000000, stroke-width:2px\n        style F2 fill:#00ff00, stroke:#000000, stroke-width:2px\n        style G2 fill:#00ff00, stroke:#000000, stroke-width:2px\n        style H2 fill:#FF7F50, stroke:#000000, stroke-width:2px\n        style I2 fill:#ADD8E6, stroke:#000000, stroke-width:2px\n    end\n\n    subgraph transition party\n       t1{transition party} --&gt; |program type : APF| t2[ fa:fa-user  COUNTER PARTY]\n       t1 --&gt; |program type : RF| t3[fa:fa-user  ANCHOR PARTY]\n    end\n</code></pre>"},{"location":"flows.html#3counterparty-onboarding-flow","title":"3.COUNTERPARTY ONBOARDING FLOW","text":"<pre><code>flowchart TD\n\n    A[COUNTERPARTY] --&gt;|party-type='NONE'| B((SUBMIT))\n    B --&gt; |action = submitted to bank| C[bank]\n    C --&gt; |bank approves| D((APPROVE))\n    C --&gt; |bank rejects| F((REJECT))\n    C --&gt; |bank returns| E((RETURN))\n    E --&gt; |action = sent_to_counterparty&lt;br/&gt;&lt;br/&gt;party-type NONE| A\n    D --&gt; |CUSTOMER if existing_customer='YES'&lt;br/&gt;&lt;br/&gt;&lt;br/&gt;NON CUSTOMER if existing_customer='NO'| A\n    F --&gt; |action = rejected_by_bank&lt;br/&gt;&lt;br/&gt;party-type = 'NONE'| A\n\n    style A fill:#FFEFD5, stroke:#000000, stroke-width:2px\n    style B fill:#B0E0E6, stroke:#000000, stroke-width:2px\n    style C fill:#ADD8E6, stroke:#000000, stroke-width:2px\n    style D fill:#00ff00, stroke:#000000, stroke-width:2px\n    style F fill:#FF7F50, stroke:#000000, stroke-width:2px\n    style E fill:#B0E0E6, stroke:#000000, stroke-width:2px\n</code></pre>"},{"location":"kredichat.html","title":"KREDICHAT","text":"<p>kredichat is an dynamic bidirectional communication platform within the Krediq ecosystem that seamlessly connects customers, sellers, and the bank. This intelligent chat solution transforms financial interactions into engaging conversations and ensuring a personalized and efficient experience.</p>"},{"location":"kredichat.html#technologies-used","title":"Technologies Used","text":"<ul> <li>Python</li> <li>Fastapi</li> <li>Websockets</li> <li>Mongodb</li> </ul>"},{"location":"kredichat.html#authors","title":"Authors","text":"<ul> <li>@anandrajB</li> </ul>"},{"location":"kredichat.html#running","title":"Running","text":"<ul> <li>pip install -r requirements.txt</li> <li>uvicorn app.main:app --reload (for local)</li> <li>gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app (for production)</li> </ul>"},{"location":"kredichat.html#api-reference","title":"API Reference","text":""},{"location":"kredichat.html#1-for-getting-chat-list-of-the-logged-in-user","title":"1. For getting chat list of the logged in user","text":"<pre><code>  ws://localhost/conversation\n</code></pre> WebSocket URL Request Body <code>ws://localhost/conversation/ws?email_id=krediq@gmail.com</code> <code>{\"type\":\"CHAT_LIST\",\"email\":\"krediq@gmail.com\"}</code>"},{"location":"kredichat.html#2-for-sending-messages","title":"2. For sending messages","text":"<pre><code>  ws://localhost/conversation\n</code></pre> WebSocket URL Request Body <code>ws://localhost/conversation/ws?email_id=krediq@gmail.com</code> <code>{\"type\": \"SEND\",\"config_id\": \"64be430ccac4e62378a1ae89\",\"members\": [\"krediq@gmail.com\",\"cp1@gmail.com\"],\"subject\": \"\",\"party\": 23,\"message\": [{\"text\": \"hi welcome\",\"sender\": \"krediq@gmail.com\",\"is_read\": [\"krediq@gmail.com\"]}]}</code>"},{"location":"kredichat.html#2-for-receiving-messages","title":"2. For receiving messages","text":"<pre><code>  ws://localhost/conversation\n</code></pre> WebSocket URL Request Body <code>ws://localhost/conversation/ws?email_id=krediq@gmail.com</code> <code>{\"type\": \"RECEIVE\",\"config_id\": \"64ab94d14078dbac86787aed\",\"members\": [\"cp1@gmail.com\",\"krediq@gmail.com\"],\"page\" : 1}</code>"},{"location":"kredifin.html","title":"KREDIFIN","text":""},{"location":"kredifin.html#description","title":"Description","text":"<p>Kredifin solution designed to streamline financial management, providing a centralized solution for businesses to manage their finances, repayable invoices, and maintain a comprehensive ledger for every accounting entry.</p>"},{"location":"kredifin.html#technologies-used","title":"Technologies Used","text":"<p>The following technologies and tools were used in the development of krediq :</p> <ul> <li>Python (version 3.12.1)</li> <li>Fastapi</li> </ul>"},{"location":"kredifin.html#running-steps","title":"Running Steps","text":"<p>To install and set up krediq, follow these steps:</p> <pre><code>- pip install -r requirements.txt\n\n- uvicorn app.main:app --reload (for local)\n\n- gunicorn -w 4 -k uvicorn.workers.UvicornWorker app.main:app (for production)\n</code></pre>"},{"location":"kredifin.html#folder-structure","title":"Folder Structure","text":"<ul> <li> <p><code>/api</code>: This directory contains all the api's.</p> </li> <li> <p>The api folder api for financing ,repayment , exchange rate , currency , configuration , loan accounts , accounting entries .</p> </li> <li> <p><code>/core</code>: This directory contains the main application code for all transactional process . - <code>/mixin</code>: This folder maintains all the mixins for the main class in resource folder.</p> <ul> <li> <p><code>/resource</code>: This folder handles the financing , repayment , invoice repayment respectively .</p> </li> <li> <p><code>/utils</code>: This folder maintains descriptors for abstract class and common attributes .</p> </li> <li> <p><code>/base.py</code>: Contains the currency , amount , account details class for dependency injection  .</p> </li> <li> <p><code>/main.py</code>: Contains the core calculation and processing such as interest rate , interest amount , grace periods , overdue and so  .</p> </li> </ul> </li> <li> <p><code>/utils</code>: This directory contains the utility functions and action that required .</p> <ul> <li>This folder maintains the response model , authentication , validations and schemas  .</li> </ul> </li> </ul> Note <ol> <li>Feel free to adjust the structure based on your  needs and best practices.</li> <li>Don't end up order of execution or Method resolution order error .</li> </ol>"},{"location":"kredifin.html#documentation","title":"Documentation","text":"<ul> <li>API Documentation</li> </ul>"},{"location":"kredifin.html#authorization","title":"Authorization","text":"<ul> <li>To access all the api in the application we use a 64bit token to access the data's</li> <li>These data's are changed based on the company</li> <li>e.g., 8yu890uy12u10u201u201u2u180801wj2iwjVENZO</li> <li>The configuration can be found in localhost/Configuration/</li> <li>These token need to send in the headers for all other api's .</li> </ul>"},{"location":"kredifin.html#calculation-methods-and-formulas","title":"Calculation Methods and Formulas","text":"<ul> <li> <p>Floating interest rate </p> <ul> <li>interest_rate = margin + floating_interest_for_the_period</li> </ul> </li> <li> <p>Fixed interest rate </p> <ul> <li>interest_rate = margin or rebate_percent</li> </ul> </li> <li> <p>Interest Amount </p> <ul> <li>interest_amount = (margin * (interest_rate / 100)) * (   (end_date - start_date) / 365   )</li> </ul> </li> <li> <p>overdue interest</p> </li> </ul>"},{"location":"kredifin.html#case-1","title":"case 1 :","text":"<ul> <li>interest_amount_1 = (     self.amount.finance_amount * (general_interest_rate / 100)     ) * (calculated_date / 365)</li> <li>interst_amount_2 = 0</li> </ul>"},{"location":"kredifin.html#case-2","title":"case 2 :","text":"<ul> <li>overdue_interest_day = calculate_days(today, due_date)</li> <li>interest_amount_1 = (     finance_amount * (general_interest_rate / 100)     ) * (self.grace_days / 365)</li> <li>interst_amount_2 = (     finance_amount * (overdue_interest_rate / 100)     ) * ( overdue_interest_day / 365)</li> </ul>"},{"location":"kredifin.html#version-management","title":"Version Management","text":"<ul> <li>The current repo follows Semantic Versioning model (SemVer) in git version controlling for production , test and development .</li> <li>Major version bumps has been avoided in the spec . </li> <li>for example ,<ul> <li>BETA-v1.1</li> <li>TEST-v1.1</li> <li>PRD-v2.1</li> </ul> </li> </ul>"},{"location":"krediflo.html","title":"KREDIFLO","text":"<p>A python django SDK that can handle state transition in your django application .</p>"},{"location":"krediflo.html#description","title":"Description","text":"<ul> <li>Finflo is designed to carry on FSM transition on your django application .</li> <li>Your state transition's are made easy with finflo</li> <li>customizable Actions and states with on_flow interchangable</li> <li>Pre installed signature levels for each action</li> </ul>"},{"location":"krediflo.html#technology-stack","title":"TECHNOLOGY STACK","text":""},{"location":"krediflo.html#important-links","title":"IMPORTANT LINKS","text":"<ol> <li>Documentation</li> <li>Postman collection</li> </ol>"},{"location":"krediflo.html#authors","title":"Authors","text":"<ul> <li>@anandrajB</li> </ul>"},{"location":"krediflo.html#prerequisite","title":"Prerequisite","text":"<ul> <li>python</li> <li>Django</li> <li>Django-rest-framework</li> </ul>"},{"location":"krediflo.html#1-installation","title":"1. Installation","text":""},{"location":"krediflo.html#11-initial-setup","title":"1.1 Initial setup","text":"<ul> <li>Install finflo using pip</li> </ul> <pre><code>    pip install finflo\n</code></pre> <ul> <li>In your django application , browse to installed_apps section in settings.py and add this ,</li> </ul> <pre><code>INSTALLED_APPS = [\n    'finflo',\n    'rest_framework'\n]\n</code></pre> <ul> <li>Add this in your settings.py</li> </ul> <pre><code>FINFLO = {\n    'WORK_MODEL' : ['MyApp.Model','MyApp2.Model2'],\n    'PARTY_MODEL' : [] #optional\n}\n</code></pre> <ul> <li> <p>The PARTY_TYPE is optional , if it is not needed you can leave it as blank like this []</p> </li> <li> <p>Navigate to the middleware section in your settings.py and add the finflo middleware</p> </li> </ul> <pre><code>MIDDLEWARE = [\n    'finflo.middleware.TransitionUserMiddleware',\n]\n</code></pre> <ul> <li>Now add this peice of code in your urls.py</li> </ul> <pre><code>urlpatterns = [\n    path('', include('finflo.urls'))\n]\n</code></pre>"},{"location":"krediflo.html#12-migrations","title":"1.2 Migrations","text":"<ul> <li>once all the steps done from the above section 1.1 .</li> <li>now we can apply the migrations for the database using ,</li> </ul> <pre><code>- python manage.py makemigrations\n</code></pre> <pre><code>- python manage.py migrate\n</code></pre>"},{"location":"krediflo.html#13-re-migrate","title":"1.3 Re-migrate","text":"<ul> <li>scenario 1 : if any new values is added to the WORK_MODEL</li> <li>example for scenario 1 :</li> </ul> <pre><code># see 1.1\n\nFINFLO = {\n    'WORK_MODEL' : ['MyApp.Model','MyApp2.Model2','MyApp3.Model3'],\n    'PARTY_TYPE' : ['MyApp1.Model1']\n}\n</code></pre> <ul> <li>In the above 1.1 , you can see MyApp3.Model3 is newly addded</li> <li>Now you can remigrate the database without droping it simply by the below command .</li> </ul> <pre><code>- python manage.py migrate --fake finflo 0001\n- python manage.py migrate finflo 0002\n</code></pre>"},{"location":"krediflo.html#usage","title":"Usage","text":"<ol> <li> <p>Once your setup is completed , whenever the objects in WORK_MODEL is created , the finflo automatically creates :</p> </li> <li> <p>Transition manager</p> </li> <li>workflowitems</li> <li> <p>workevents</p> </li> <li> <p>The transition for each model can be carried out with 2 methods:</p> </li> <li> <p>Navigate to the url : localhost/transition/</p> <ul> <li>in the content section use the format as below and POST</li> <li>{\"type\" : \"MyApp.Model\" , \"action\" : \"MyAction\" , \"t_id\" : \"1\"}</li> </ul> </li> <li> <p>In Postman , pass the following key in body as follows</p> <ul> <li>t_id (transition_id)</li> <li>type (model_type)</li> <li>action</li> </ul> </li> <li> <p>Some important information for transition are as follows :</p> </li> </ol> Arguments Data_Type type str action str t_id int source str interim str target str from_party str to_party str"},{"location":"krediflo.html#api-urls","title":"API URLS","text":"<ol> <li>List of all Url's</li> </ol> Api URL's METHOD FORM DATA QUERY_PARAMS Example Description localhost/model/ GET NONE ?type=Model&amp;t_id=1 or t_id=1 <code>localhost/model/?type=Model&amp;t_id=1</code> Fetch resource localhost/transition/ POST action , type , tid ,  **_optional :** from_party , to_party ,  source , interim , target NONE <code>localhost/transition/</code> Perform a transition localhost/transition/reset/ POST type , t_id NONE <code>localhost/transition/reset/</code> Reset a specific transition localhost/action/ GET , POST description , model ,  from_state ,to_state , from_party , to_party , stage_required ?action=MYACTION or ?action=MYACTION&amp;?model=Model <code>localhost/action/?action=MYACTION</code> Get or perform an action localhost/signatures/ GET , POST name , sub_action_name NONE <code>localhost/signatures/</code> Retrieve or create action signatures localhost/party-type/ GET , POST description NONE <code>localhost/party-type/</code> Get or create party types localhost/states/ GET , POST description NONE <code>localhost/states/</code> Get or create states localhost/workflowitems/ GET NONE NONE <code>localhost/workflowitems/</code> Retrieve workflow items localhost/workevents/ GET NONE NONE <code>localhost/workevents/</code> Retrieve work events"},{"location":"krediflo.html#manual-transition","title":"MANUAL TRANSITION","text":"<ol> <li>example</li> </ol> <pre><code>     from finflo.transition import FinFlotransition\n\n     # Create a manual transition\n\n     FinFlotransition(\n         t_id=\"1\",\n         type=\"accounts.model1\",\n         source=\"draft\",\n         interim=\"awaiting\",\n         target=\"awaiting\",\n         from_party=1,\n         to_party=2\n     )\n</code></pre>"},{"location":"krediflo.html#support","title":"Support","text":"<p>For support, contact</p> <ol> <li>support@venzo.com</li> <li>anandrajb@venzotechnologies.com</li> </ol>"},{"location":"trouble.html","title":"TROUBLE SHOOTING IN MIGRATIONS","text":""},{"location":"trouble.html#trouble-shooting-circular-dependency-issue","title":"Trouble shooting circular dependency issue","text":"<ul> <li>if you encountered with the above issue , kindly follow the below steps to revoke it .</li> <li>make sure if your'e performing those steps with new DB without schemas</li> </ul>"},{"location":"trouble.html#cause-of-issue","title":"CAUSE OF ISSUE","text":"<ol> <li>accounts app dependents on transaction and vice versa </li> <li>there is no cause such queries can be done as reference models 'accounts.parties'</li> </ol>"},{"location":"trouble.html#steps","title":"STEPS","text":"<ol> <li>Delete the migrations folder in accounts/migrations and in transaction/migrations.</li> <li>Navigate to accounts/models , now you can find the userprocessauth model </li> <li> <p>now comment the section in your IDE </p> BEFOREAFTER <pre><code>line no : 360  in accounts/models\n---\n\nclass userprocessauth(models.Model):\n    sign_required = models.IntegerField()\n    data_entry = models.BooleanField(default=False, blank=True, null=True)\n    sign_a = models.BooleanField(default=False, blank=True, null=True)\n    sign_b = models.BooleanField(default=False, blank=True, null=True)\n    sign_c = models.BooleanField(default=False, blank=True, null=True)\n\n    \"\"\" comment the below section including meta class before migrations  \"\"\"\n    \"\"\" uncommment once on successful migration and remigrate \"\"\"\n\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    model = models.ForeignKey(Flowmodel, on_delete=models.DO_NOTHING)\n    action = models.ForeignKey(Action, on_delete=models.DO_NOTHING)\n\n    def __str__(self):\n        return f'{self.model.description.split(\".\")[1].upper()[:-1]} - {self.action} - {self.user}'\n\n    class Meta:\n        verbose_name_plural = \"User authorization\"\n        unique_together = (\"action\", \"user\", \"model\")\n        indexes = [\n            models.Index(fields=[\"user\"]),\n            models.Index(fields=[\"model\"]),\n            models.Index(fields=[\"action\"]),\n        ]\n</code></pre> <pre><code>class userprocessauth(models.Model):\n    sign_required = models.IntegerField()\n    data_entry = models.BooleanField(default=False, blank=True, null=True)\n    sign_a = models.BooleanField(default=False, blank=True, null=True)\n    sign_b = models.BooleanField(default=False, blank=True, null=True)\n    sign_c = models.BooleanField(default=False, blank=True, null=True)\n</code></pre> </li> <li> <p>Navigate to accounts/models , now you can find the Partyaction model </p> BEFOREAFTER <pre><code>class PartyAction(Action):\n\n    def __str__(self):\n        return self.description\n\nclass Meta:\n    proxy = True\n    ordering = ['id']\n    verbose_name_plural = \"Finflo Action\"\n\n@property\ndef model_name(self):\n    return self.model.description\n</code></pre> <pre><code>class PartyAction(models.Model): \n    pass\n</code></pre> </li> <li> <p>Navigate to accounts/admin and comment the below code in line no. 70.</p> <pre><code>admin.site.register(PartyAction , ActionModelAdmin)\n</code></pre> </li> <li> <p>Now apply the migrations</p> <pre><code>- python manage.py makemigrations accounts\n- python manage.py makemigrations transaction\n- python manage.py migrate --run-syncdb\n</code></pre> </li> <li> <p>now undo the point 3 and 4 and 5 redo the point 6</p> </li> </ol> <p></p>"},{"location":"trouble.html#database-deletion-and-migrations-rollback","title":"DATABASE DELETION AND MIGRATIONS ROLLBACK","text":""},{"location":"trouble.html#note-remember-there-is-no-roll_back-once-data-been-deleted","title":"\u2757\ufe0f NOTE : REMEMBER THERE IS NO ROLL_BACK ONCE DATA BEEN DELETED","text":""},{"location":"trouble.html#case-1","title":"CASE 1 :","text":"<ol> <li> <p>If you need to delete all data from database </p> <pre><code>- python manage.py flush \n- python manage.py sqlflush \n- python manage.py dbflush\n</code></pre> </li> <li> <p>Drop all the tables in the database</p> <pre><code>- python manage.py drop_tables\n</code></pre> </li> <li> <p>Delete the migrations folder found in   accounts/migration and transaction/migrations.</p> </li> <li> <p>Follow the steps in troubleshoot section , if there is any circular dependency error .</p> </li> <li> <p>Now migrate the project with </p> <pre><code>- python manage.py makemigrations accounts\n- python manage.py makemigrations transaction\n- python manage.py migrate \n- python manage.py migrate --run-syncdb\n</code></pre> </li> <li> <p>Now again add the FinfloAction proxy model and apply finflo migration</p> <pre><code>- python manage.py migrate \n- python manage.py migrate --fake finflo 0001\n- python manage.py migrate finflo 0002\n</code></pre> </li> <li> <p>Now create a superuser and run the test cases to make sure all the api are working fine</p> <pre><code>- python manage.py createsuperuser\n</code></pre> </li> </ol>"},{"location":"trouble.html#case-2","title":"CASE 2 :","text":""},{"location":"trouble.html#roll-back-migrations","title":"ROLL BACK MIGRATIONS","text":""},{"location":"trouble.html#rare-case","title":"** rare case","text":"<ol> <li>Roll back the current migration for a app with <pre><code>- python manage.py migrate appname zero \n- python manage.py migrate appname 0001_initial\n- python manage.py migrate appname 0002_auto\n</code></pre> </li> </ol>"},{"location":"trouble.html#new-model-in-finflo","title":"NEW MODEL IN FINFLO","text":"<ol> <li>Addition of new work model in finflo settings can be acheived via below command <pre><code>- python manage.py migrate \n- python manage.py migrate --fake finflo 0001\n- python manage.py migrate finflo 0002\n- python manage.py migrate --fake accounts\n- python manage.py migrate accounts\n- python manage.py migrate --fake transaction \n- python manage.py migrate transaction\n</code></pre> </li> </ol>"},{"location":"trouble.html#data-backup","title":"DATA BACKUP","text":""},{"location":"trouble.html#dumping-data-into-json","title":"DUMPING DATA INTO JSON","text":"<ul> <li> <p>dumping all data</p> <pre><code>- python manage.py dumpdata &gt; data.json\n</code></pre> </li> <li> <p>dumping particular app data</p> <pre><code>- python manage.py dumpdata accounts &gt; accounts.json\n</code></pre> </li> <li> <p>dumping particular app model data</p> <pre><code>- python manage.py dumpdata accounts.users &gt; users.json\n</code></pre> </li> </ul>"}]}